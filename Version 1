#include <iostream>
#include <Windows.h>	//only used for clearing screen

#define Y 20
#define X 10

using namespace std;
char gameGrid[Y][X] = {' '}; //  grid that will be the play area. pretty sure it's Y by X
bool running = true;

char* lastPos0;	// pointer or something
char* newPos0;
char *ptr;

int yMove = 1;

bool draw = true;

char cubeSprite[2][2] =
	{
		{'a','a'},
		{'a','a'}		 // 2 x 2 square,
	};

void moveSprite() 
{

	for (int i = 0; i < 2; i++) 
	{
		lastPos0 = &gameGrid[yMove - 1][i];		// addresses of the part that will be removed/overwritten

		newPos0 = &gameGrid[yMove][i];		    // pointer to first, 

		gameGrid[yMove + 1][i] = *newPos0;	    // and then second element of the sprite. & prefix will grab the address, nothing

		*lastPos0 = ' ';					    // writes nothing to the old addresses 

		
	}
	

	if (gameGrid[19][0] == ' ') 
	{
		
	}
	else 
	{
		yMove++;
	}
	
}



void drawSprite()						// inital draw, needs to draw only once
{
	for (int i = 0; i < 2; i++)			// first slice
	{
		gameGrid[0][i] = cubeSprite[0][i];
	}

	for (int i = 0; i < 2; i++)			// draws the sprite in slices, 2nd slice
	{
		gameGrid[1][i] = cubeSprite[1][i];
	}
	draw = false; // only draw once
	//cout << &lastPos0;
	//cout << &newPos0 << "\n";
}



void drawGrid()
{
	if (draw)		  // this might be ineffective to check every time 
	{
		drawSprite(); // draws sprite 
	}

	moveSprite();

	for (int y = 0; y < Y; y++) // y first then draw x across for each 
	{
		for (int x = 0; x < X; x++)
		{
			cout << gameGrid[y][x] << " ";
		}
		cout << "\n";
	}
}


int main() 
{
	while (running) 
	{
		//cout << gameGrid[19][0];
		drawGrid();		 // just a visual representation of the array
		//newPos0++;	// check distance to edge of array, also check distance to filled cells
		//cout << &newPos0;


		Sleep(1000);	 // pretty much controls tick rate
		system("CLS");	 // clears the screen 

	}
}
